{"version":3,"sources":["images/background.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","account","networkId","dropLive","walletAshBalance","isWhitlisted","tokensClaimed","transactionInProgress","userFeedback","contractAllowance","priceInAsh","dropDate","Date","parse","dropEnd","dateNow","now","componentDidMount","a","setState","startTimer","window","ethereum","web3","Web3","currentProvider","setNetwork","getContractsInstances","setAccount","handleMintClick","amount","price","ashInstance","methods","approve","UNITYInstance","_address","toString","send","from","mint","alert","this","eth","net","getId","deployedNetwork","UNITY","networks","Contract","abi","parseInt","process","ash","getAccounts","accounts","getAccountsData","resetAccountData","isAdmin","call","_tokensWhitelisted","parseFloat","balanceOf","allowance","_tokensClaimed","enable","error","console","log","decreaseAllowance","Fragment","Math","floor","id","className","href","tokenNumber","Button","variant","onClick","Badge","text","bg","renderButton","myInterval","setInterval","secondsToDrop","timeConsidered","days","hours","minutes","seconds","on","chainId","style","backgroundImage","background","backgroundPosition","backgroundSize","backgroundRepeat","Row","renderUserInterface","renderConnexionStatus","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6728462e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.564d1301.png\";","import React, { Component } from \"react\";\nimport UNITY  from \"./contracts/UNITY.json\";\nimport ash  from \"./contracts/fakeASH.json\";\n// import ash  from \"./contracts/Ash.json\";\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Badge from 'react-bootstrap/Badge';\nimport Alert from 'react-bootstrap/Alert';\nimport Spinner from 'react-bootstrap/Spinner';\nimport background from \"./images/background.png\";\nimport Web3 from \"web3\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    account: null,\n    networkId: null,\n    dropLive: false,\n    walletAshBalance: null,\n    isWhitlisted: null,\n    tokensClaimed: null,\n    transactionInProgress: false,\n    userFeedback: null,\n    contractAllowance: null,\n    priceInAsh: 18*10**18,\n    dropDate: Date.parse('09 Mar 2022 15:00:00 GMT'),\n    dropEnd: Date.parse('11 Mar 2022 15:00:00 GMT'),\n    dateNow: Date.now()\n  }\n\n  componentDidMount = async () => {\n    if(this.state.dateNow >= this.state.dropDate  && this.state.dateNow <= this.state.dropEnd){\n      this.setState({dropLive: true});\n    }else{\n      this.startTimer();\n    }\n    if (window.ethereum) {\n      this.web3 = new Web3(window.ethereum);\n    } else if (window.web3) {\n      this.web3  = new Web3(window.web3.currentProvider);\n    };\n    if(this.web3){\n      await this.setNetwork();\n      await this.getContractsInstances();\n      await this.setAccount();\n    }\n  }\n\n  async getContractsInstances(){\n    this.networkId = await this.web3.eth.net.getId();\n    this.deployedNetwork = UNITY.networks[this.networkId];\n      this.UNITYInstance = new this.web3.eth.Contract(\n        UNITY.abi,\n        parseInt(process.env.REACT_APP_MAINNET_NETWORK) && process.env.REACT_APP_MAINNET_CONTRACT_ADDRESS\n      )\n      this.ashInstance = new this.web3.eth.Contract(\n        ash.abi,\n        parseInt(process.env.REACT_APP_MAINNET_NETWORK) && process.env.REACT_APP_MAINNET_ASH_ADDRESS\n      )\n  }\n\n  async setAccount(){\n    if(this.state.networkId === parseInt(process.env.REACT_APP_MAINNET_NETWORK)){\n      let accounts = await this.web3.eth.getAccounts();\n      this.setState({account: accounts[0]});\n      if(this.state.account) this.getAccountsData()\n    }else{\n      this.resetAccountData();\n    }\n  }\n\n  resetAccountData(){\n    this.setState({\n      account: null,\n      isWhitlisted: null,\n      walletAshBalance: null,\n      tokensClaimed: null,\n    })\n  }\n\n  async setNetwork(){\n    if(this.web3){\n      let networkId = await this.web3.eth.net.getId();\n      this.setState({networkId: networkId})\n    }\n  }\n\n  async getAccountsData(){\n    if(this.state.networkId === parseInt(process.env.REACT_APP_MAINNET_NETWORK) ){\n      this.setState({\n        isAdmin: await this.UNITYInstance.methods.isAdmin(this.state.account).call(),\n        isWhitlisted: await this.UNITYInstance.methods._tokensWhitelisted(this.state.account).call(),\n        walletAshBalance: parseFloat(await this.ashInstance.methods.balanceOf(this.state.account).call()),\n        contractAllowance: parseInt(await this.ashInstance.methods.allowance(this.state.account, process.env.REACT_APP_MAINNET_CONTRACT_ADDRESS).call()),\n        tokensClaimed: await this.UNITYInstance.methods._tokensClaimed(this.state.account).call(),\n      });\n    }\n  }\n\n  async connectWallet(){\n    this.setState({transactionInProgress: true})\n    try{\n      window.ethereum.enable()\n    }catch(error){\n      console.log(error)\n    }\n    this.setState({transactionInProgress: false})\n  }\n\n  revokeAshApproval(){\n    this.ashInstance.methods.decreaseAllowance(process.env.REACT_APP_MAINNET_CONTRACT_ADDRESS, this.state.contractAllowance.toString()).call()\n  }\n\n  renderConnexionStatus(){\n    if(this.state.account){\n      return(\n        <React.Fragment>\n          <p>Your Ash balance: {Math.floor(this.state.walletAshBalance/(10**18))}</p>\n          <span id='connexion_info'><small>Connected as <b>{this.state.account}</b></small></span>\n          <span id='connexion_info'><small>Contract address <b><a className=\"etherscan_link\" href={\"https://etherscan.io/address/\"+process.env.REACT_APP_MAINNET_CONTRACT_ADDRESS}>{process.env.REACT_APP_MAINNET_CONTRACT_ADDRESS}</a></b></small></span>\n          {/* <span id='connexion_info'><small>The contract is approved to spend {this.state.contractAllowance/10**18} ASH on your behalf. {this.state.contractAllowance ? <a onClick={()=>this.revokeAshApproval()}>Revoke</a> : null}</small></span> */}\n          <span id='connexion_info'><small>The contract is approved to spend {this.state.contractAllowance/10**18} ASH on your behalf. <a className=\"etherscan_link\" href={\"https://etherscan.io/tokenapprovalchecker?search=\"+this.state.account}>Revoke</a></small></span>\n        </React.Fragment>\n      )\n    }\n  }\n\n  handleMintClick = async(amount) => {\n    this.setState({\n      transactionInProgress: true,\n      userFeedback: \"...approving ash...\"})\n    try{\n      let price = this.state.priceInAsh * amount\n      if(this.state.contractAllowance < price){\n        await this.ashInstance.methods.approve(this.UNITYInstance._address, price.toString()).send({from: this.state.account})\n      }\n      this.setState({\n        userFeedback: \"...minting...\"})\n      await this.UNITYInstance.methods.mint(this.state.account).send({from: this.state.account});\n    }catch(error){\n      alert(error)\n    }\n    this.setAccount()\n    this.setState({transactionInProgress: false,\n      userFeedback: null})\n  }\n\n  renderButton(tokenNumber){\n    if(this.state.walletAshBalance >= this.state.priceInAsh ){\n      return(\n        <Button id=\"mint_button\" variant='light' onClick={() => this.handleMintClick(tokenNumber)}>Mint !</Button> \n      )\n    }else{\n      return(\n        <Badge id=\"wl_badge\" text=\"dark\" bg=\"light\">Not enough Ash to mint</Badge>\n      )\n    }\n  }\n\n  renderOneMintButton(){\n    return(\n      <React.Fragment>\n        {this.renderButton(1)}\n      </React.Fragment>\n    )\n  }\n\n  renderClaimBadge(){\n    return <Badge id=\"wl_badge\" text=\"dark\" bg=\"light\">NFT Claimed</Badge>\n  }\n\n  startTimer(){\n    this.myInterval = setInterval(() => {\n      this.setState(({ dateNow: dateNow }) => ({\n        dateNow: Date.now()\n      }))\n    }, 1000)\n  }\n\n  renderTimer(){\n    let secondsToDrop = Math.floor((this.state.dropDate - this.state.dateNow)/1000);\n    if(secondsToDrop<=0) this.setState({dropLive: true})\n    let timeConsidered = 0\n    let days = Math.floor(secondsToDrop/(60*60*24))\n    timeConsidered += days*60*60*24\n    let hours = Math.floor((secondsToDrop-timeConsidered)/(60*60))\n    timeConsidered += hours*60*60\n    let minutes = Math.floor((secondsToDrop-timeConsidered)/(60))\n    timeConsidered += minutes*60\n    let seconds = (secondsToDrop-timeConsidered)\n    return ` ${days < 10 ? '0' + days : days} : ${hours < 10 ? '0' + hours : hours} : ${minutes < 10 ? '0' + minutes : minutes}  : ${seconds < 10 ? '0' + seconds : seconds} `\n  }\n\n  renderUserInterface(){\n\n        return(\n          <div>\n            Drop paused\n          </div>\n        )\n\n  }\n\n  render() {\n    console.log(this.state)\n    if(this.web3 && this.state.dropLive){\n      window.ethereum.on('accountsChanged', async () => {\n        await this.setAccount()\n      })\n      window.ethereum.on('chainChanged', async (chainId) => {\n        await this.setNetwork(chainId)\n        await this.setAccount();\n      });\n    }\n    return (\n      <div className=\"App background\" style={{\n        backgroundImage: `url(${background})`,\n        backgroundPosition: 'center',\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat'}}>\n          <Row id=\"App_row\">\n            <Row id=\"title_row\">\n              <h1 className=\"title\"><b>UNITY</b></h1>\n              <span className=\"subtitle\">ASH EXCLUSIVE DROP BY HOXID</span>\n            </Row>\n            <Row id=\"button_row\">\n              {this.renderUserInterface()}\n            </Row>\n            <Row id=\"about_row\">\n              {/* <span>A dream within a dream is a dynamic NFT.</span> */}\n              <span>{this.state.priceInAsh/10**18} ASH</span> \n              <span>Whitelist only</span> \n            </Row>\n            <Row id=\"connexion_status\">\n              {this.renderConnexionStatus()}\n            </Row>\n          </Row>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}